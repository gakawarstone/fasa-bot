import aiogram
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove

from bot_config import bot

data = {}


async def hello(message: aiogram.types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é –≤–∞—Å —ç—Ç–æ—Ç –±–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏',
                          reply_markup=ReplyKeyboardRemove())
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ê —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é [1, 2, 3]')
    bot.add_state_handler(FSM.get_set_a, get_set_a)
    await FSM.get_set_a.set()


async def get_set_a(message: aiogram.types.Message, state: FSMContext):
    await state.finish()
    data['set_a'] = set(message.text.split(', '))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ B —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é [1, 2, 3]')
    bot.add_state_handler(FSM.get_set_b, get_set_b)
    await FSM.get_set_b.set()


async def get_set_b(message: aiogram.types.Message, state: FSMContext):
    await state.finish()
    data['set_b'] = set(message.text.split(', '))
    await choose_operate(message)


async def print_result(message: aiogram.types.Message, state: FSMContext):
    await state.finish()
    a = data['set_a']
    b = data['set_b']
    operate = message.text

    if (operate == '–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ'):
        await message.answer('–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ = ' + str(a.intersection(b)))
    elif (operate == '–û–±—å–µ–¥–∏–Ω–µ–Ω–∏–µ'):
        await message.answer('–û–±—å–µ–¥–∏–Ω–µ–Ω–∏–µ = ' + str(a.union(b)))
    elif (operate == '–†–∞–∑–Ω–æ—Å—Ç—å A B'):
        await message.answer('–†–∞–∑–Ω–æ—Å—Ç—å –ê –í = ' + str(a - b))
    elif (operate == '–†–∞–∑–Ω–æ—Å—Ç—å B A'):
        await message.answer('–†–∞–∑–Ω–æ—Å—Ç—å –í –ê = ' + str(b - a))
    elif (operate == 'C–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–Ω–∏—Ü–∞'):
        await message.answer('C–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–Ω–∏—Ü–∞' + str(a.symmetric_difference(b)))
    elif (operate == '–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ B –¥–æ A'):
        if a.issuperset(b):
            await message.answer('–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –í –¥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ê:' + str(a.difference(b)))
        else:
            await message.answer('–ú–Ω–æ–∂–µ—Å—Ç–≤–æ B –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–º–Ω–æ–∂–µ—Ç–≤–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ A')
    elif (operate == '–†–∞–∑–±–∏–µ–Ω–∏–µ B'):
        await message.answer('–†–∞–∑–±–∏–µ–Ω–∏–µ' + str(b.symmetric_difference(a)))

    buttons = [['–î–∞', '–ù–µ—Ç'], ['–ü–æ–º–µ–Ω—è—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–∞']]
    bot.add_keyboard('another_operate', buttons)
    await message.answer('–•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ –æ–ø–µ—Ä–∞—Ü–∏—é?',
                          reply_markup=bot.keyboards['another_operate'])
    bot.add_state_handler(FSM.check_another_operate, check_another_operate)
    await FSM.check_another_operate.set()


async def check_another_operate(message: aiogram.types.Message, state: FSMContext):
    await state.finish()
    if (message.text == '–î–∞'):
        await choose_operate(message)
    elif (message.text == '–ü–æ–º–µ–Ω—è—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–∞'):
        await hello(message)
    elif (message.text == '–ù–µ—Ç'):
        await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∂–¥–µ–º –≤–∞—Å –µ—â–µ\n–µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start',
                              reply_markup=ReplyKeyboardRemove())
    

async def choose_operate(message: aiogram.types.Message):
    buttons = [['–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ', '–û–±—å–µ–¥–∏–Ω–µ–Ω–∏–µ'], 
               ['–†–∞–∑–Ω–æ—Å—Ç—å A B', '–†–∞–∑–Ω–æ—Å—Ç—å B A'],
               ['C–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–Ω–∏—Ü–∞', '–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ B –¥–æ A'],
               ['–†–∞–∑–±–∏–µ–Ω–∏–µ B']]
    bot.add_keyboard('operate_choose', buttons)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ üõ† <b>–æ–ø–µ—Ä–∞—Ü–∏—é</b>',
                         reply_markup=bot.keyboards['operate_choose'])
    bot.add_state_handler(FSM.print_result, print_result)
    await FSM.print_result.set()


class FSM(StatesGroup):
    get_set_a = State()
    get_set_b = State()
    print_result = State()
    check_another_operate = State()